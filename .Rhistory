W.init <- 2 # Initial Cake size
kAllw <- seq(0.0001, W.init, 0.01)   # State Space
kAllc <- kAllw     # Control Space
kAlleps <- seq(0.001,1, 0.05)  # Private Shock Space
kNumW <- length(kAllw)
kNumC <- length(kAllc)
kNumEps <- length(kAlleps)
kNumStates <- kNumW
kSinkUtil <- 1e-15
theta <- 1
beta <- 0.8
B <- 1/(1-beta)
A <- B*(log(1-beta)+((beta/(1-beta))*log(beta)))
V.true <- A+B*log(0.5*kAllw)
V.true
hist(rlnorm(100))
discretize <- function(x, data.min, data.max, N) {
data.grid <- data.min:N*(data.max/N)
x.discrete <- x  # Discretized version of XtScaled
for(i in 1:(length(data.grid)-1)) {
x.discrete[which(x>=data.grid[i] & x<=data.grid[i+1])] <- i
}
return(x.discrete)
}
discretize <- function(x, data.min, data.max, N) {
data.grid <- data.min:N*(data.max/N)
x.discrete <- x  # Discretized version of XtScaled
for(i in 1:(length(data.grid)-1)) {
x.discrete[which(x>=data.grid[i] & x<=data.grid[i+1])] <- i
}
return(x.discrete)
}
N <- 10  # Number of grid size
MAX <- 20
MIN <- 0
eps <- rlnorm(10)
xd <- discretize(x, MIN, MAX, N)
eps <- rlnorm(10)
eps.discrete <- discretize(eps, MIN, MAX, N)
eps.discrete
eps
discretize <- function(x, data.min, data.max, N) {
data.grid <- data.min:N*(data.max/N)
x.discrete <- x  # Discretized version of XtScaled
for(i in 1:(length(data.grid)-1)) {
x.discrete[which(x>=data.grid[i] & x<=data.grid[i+1])] <- i - 1
}
return(x.discrete)
}
eps <- rlnorm(10)
eps.discrete <- discretize(eps, MIN, MAX, N)
eps.discrete
length(data.grid)
N <- 50  # Number of grid size
MAX <- 25
MIN <- 0
discretize <- function(x, data.min, data.max, N) {
data.grid <- data.min:N*(data.max/N)
x.discrete <- x  # Discretized version of XtScaled
for(i in 1:(length(data.grid)-1)) {
x.discrete[which(x>=data.grid[i] & x<=data.grid[i+1])] <- i - 1
}
return(x.discrete)
}
eps <- rlnorm(10)
eps.discrete <- discretize(eps, MIN, MAX, N)
eps.discrete
eps
round(eps)
pgamma
?pgamma
plnorm
plnorm(0:10)
plnorm(0:2)
plnorm(0:10)
install.packages("actuar")
install.packages("actuar")
library("actuar"")
library("actuar")
rm(discretize)
library("actuar")
discretize
N <- 50  # Number of grid size
MAX <- 2
MIN <- 0
N <- 10  # Number of grid size
MAX <- 2
MIN <- 0
data.grid <- data.min:N*(data.max/N)
data.grid <- MIN:N*(MAX/N)
data.grid
MAX/N
N*(MAX/N)
MIN:N
MAX/N
N <- 5  # Number of grid size
MAX <- 2
MIN <- 0
data.grid <- MIN:N*(MAX/N)
x.discrete <- x  # Discretized version of XtScaled
N <- 5  # Number of grid size
MAX <- 2
MIN <- 0
data.grid <- MIN:N*(MAX/N)
data.grid
N <- 10  # Number of grid size
MAX <- 5
MIN <- 0
eps <- rlnorm(10)
eps
eps <- rlnorm(10)
eps
data.grid <- MIN:N*(MAX/N)
data.grid
for(i in 1:(length(data.grid)-1)) {
eps.discrete[which(eps>=data.grid[i] & x<=data.grid[i+1])] <- mean((data.grid[i]+data.grid[i+1]))
}
for(i in 1:(length(data.grid)-1)) {
eps.discrete[which(eps>=data.grid[i] & eps<=data.grid[i+1])] <- mean((data.grid[i]+data.grid[i+1]))
}
eps.discrete
eps
data.grid
for(i in 1:(length(data.grid)-1)) {
eps.discrete[which(eps>=data.grid[i] & eps<=data.grid[i+1])] <- ((data.grid[i+1]-data.grid[i])/2)+data.grid[i]
}
eps.discrete
eps
discretize
plnorm(eps.discrete)
eps
(MAX-MIN)/N
discretize(plnorm(eps.discrete), method = "rounding",
from = MIN, to = MAX, step = (MAX-MIN)/N)
plnorm(eps.discrete)
plnorm
discretize(plnorm(eps.discrete, 0, 1), method = "rounding",
from = MIN, to = MAX, step = (MAX-MIN)/N)
discretize
?discretize
discretize(plnorm, method = "rounding",
from = MIN, to = MAX, step = (MAX-MIN)/N)
data.grid
data.grid.p
data.grid.p <- discretize(plnorm, method = "rounding",
from = MIN, to = MAX, step = (MAX-MIN)/N)
for(i in 1:(length(data.grid)-1)) {
eps.discrete[which(eps>=data.grid[i] & eps<=data.grid[i+1])] <- ((data.grid[i+1]-data.grid[i])/2)+data.grid[i]
eps.prob[which(eps>=data.grid[i] & eps<=data.grid[i+1])] <- data.grid.p[i]
}
eps <- rlnorm(10)
eps
eps <- rlnorm(10)
plnorm(esp)
eps.prob <- plnorm(eps)
eps.prob
N <- 10  # Number of grid size
MAX <- 5
MIN <- 0
eps <- rlnorm(10)
eps.prob <- plnorm(eps)
eps
eps
eps <- rlnorm(10)
eps
eps <- rlnorm(10)
eps
eps.discrete <- eps
eps.prob.d <- eps.prob
eps.prob.d
data.grid <- MIN:N*(MAX/N)
data.grid
eps.prob.d <- eps.prob
eps.discrete <- eps
eps.prob.d <- eps.prob
eps.discrete
eps.prob.d
data.grid <- MIN:N*(MAX/N)
data.grid.p <- discretize(plnorm, method = "rounding",
from = MIN, to = MAX, step = (MAX-MIN)/N)
for(i in 1:(length(data.grid)-1)) {
eps.discrete[which(eps>=data.grid[i] & eps<=data.grid[i+1])] <- ((data.grid[i+1]-data.grid[i])/2)+data.grid[i]
eps.prob[which(eps>=data.grid[i] & eps<=data.grid[i+1])] <- data.grid.p[i]
}
eps
eps.discrete
eps.prob
eps.prob.d
data.grid
data.grid.p
dlnorm(0.25)
dlnorm(0.35)
plnorm(0.325)
plnorm(0.25)
eps.prob <- dlnorm(eps)
eps.prob
eps <- rlnorm(10)
eps.prob <- dlnorm(eps)
eps.discrete <- eps
eps.prob.d <- eps.prob
eps.prob.d <- eps.prob
data.grid <- MIN:N*(MAX/N)
data.grid.p <- discretize(plnorm, method = "rounding",
from = MIN, to = MAX, step = (MAX-MIN)/N)
for(i in 1:(length(data.grid)-1)) {
eps.discrete[which(eps>=data.grid[i] & eps<=data.grid[i+1])] <- ((data.grid[i+1]-data.grid[i])/2)+data.grid[i]
eps.prob[which(eps>=data.grid[i] & eps<=data.grid[i+1])] <- data.grid.p[i]
}
eps.prob
eps <- rlnorm(10)
eps.prob <- dlnorm(eps)
eps.discrete <- eps
eps.prob.d <- eps.prob
data.grid <- MIN:N*(MAX/N)
data.grid.p <- discretize(plnorm, method = "rounding",
from = MIN, to = MAX, step = (MAX-MIN)/N)
for(i in 1:(length(data.grid)-1)) {
eps.discrete[which(eps>=data.grid[i] & eps<=data.grid[i+1])] <- ((data.grid[i+1]-data.grid[i])/2)+data.grid[i]
eps.prob.d[which(eps>=data.grid[i] & eps<=data.grid[i+1])] <- data.grid.p[i]
}
eps
eps.discrete
eps.prob.d
eps.prob
N <- 20  # Number of grid size
MAX <- 5
MIN <- 0
eps <- rlnorm(10)
eps.prob <- dlnorm(eps)
eps.discrete <- eps
eps.prob.d <- eps.prob
data.grid <- MIN:N*(MAX/N)
data.grid.p <- discretize(plnorm, method = "rounding",
from = MIN, to = MAX, step = (MAX-MIN)/N)
for(i in 1:(length(data.grid)-1)) {
eps.discrete[which(eps>=data.grid[i] & eps<=data.grid[i+1])] <- ((data.grid[i+1]-data.grid[i])/2)+data.grid[i]
eps.prob.d[which(eps>=data.grid[i] & eps<=data.grid[i+1])] <- data.grid.p[i]
}
eps.prob.d
eps.prob
eps
eps.discrete
N <- 50  # Number of grid size
MAX <- 10
MIN <- 0
eps <- rlnorm(10)
eps.prob <- dlnorm(eps)
eps.discrete <- eps
eps.prob.d <- eps.prob
data.grid <- MIN:N*(MAX/N)
data.grid.p <- discretize(plnorm, method = "rounding",
from = MIN, to = MAX, step = (MAX-MIN)/N)
for(i in 1:(length(data.grid)-1)) {
eps.discrete[which(eps>=data.grid[i] & eps<=data.grid[i+1])] <- ((data.grid[i+1]-data.grid[i])/2)+data.grid[i]
eps.prob.d[which(eps>=data.grid[i] & eps<=data.grid[i+1])] <- data.grid.p[i]
}
eps.discrete
eps
eps.prob
eps.prob.d
eps.discrete
eps.prob.d <- dlnorm(eps.discrete)
eps.prob.d
eps
eps.discrete
eps.prob
eps.prob.d
data.grid
data.grid
for(i in 1:(length(data.grid)-1)) {
eps.discrete[which(eps>=data.grid[i] & eps<=data.grid[i+1])] <- ((data.grid[i+1]-data.grid[i])/2)+data.grid[i]
kAlleps[i] <- ((data.grid[i+1]-data.grid[i])/2)+data.grid[i]
}
eps.prob.d <- dlnorm(eps.discrete)
kAlleps
length(kAlleps)
unload(actuar)
